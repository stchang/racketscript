#lang racket/base
;; requires racket/src/expander installed as a pkg
(require expander/common/set)
(set)
(set 'a)
(set 'a 'c 'b)
(seteq)
(seteq 'a)
;(seteq 'a 'c 'b) ; test fails: output prints in different order
(seteqv)
(define seteqv/a (set-add (seteqv) 'a))
(define seteqv/ab (set-add seteqv/a 'b))
(define seteqv/ac (set-add seteqv/a 'c))
(define seteqv/abc (set-add seteqv/ab 'c))
;; (seteqv 'a)
;; (seteqv 'a 'c 'b)

(set? 1)
(set? (set))
(set? (set 'x))
(set? (seteq))
(set? (seteqv))

(set-empty? (set))
(set-empty? (seteq))
(set-empty? (seteqv))
(set-empty? (set 'a))
(set-empty? (seteq 'a))

(set-member? (set) 'a)
(set-member? (set 'a) 'a)
(set-member? (set 'b) 'a)

(set-member? (seteq) 'a)
(set-member? (seteq 'a) 'a)
(set-member? (seteq 'b) 'a)
(set-member? (seteqv) 'a)

(set-count (set))
(set-count (seteq))
(set-count (seteqv))

(set-count (set 'a))
(set-count (seteq 'a 'b))

(set-count (set 'a 'b 'c 'd 'e))
(set-count (seteq 'a 'b 'c 'd 'e 'f 'g))

(set-add (set) 'a)
(set-add (seteq) 'a)
(set-add (seteqv) 'a)
(set-add (set 'a) 'a)
(set-add (seteq 'a) 'a)

(set-remove (set) 'a)
(set-remove (seteq) 'a)
(set-remove (seteqv) 'a)
(set-remove (set 'a) 'a)
(set-remove (seteq 'a) 'a)
(set-remove seteqv/a 'a)

(set-first (set 'a))
(set-first (seteq 'a))
(set-first (set 'a 'b))
(set-first (seteq 'a 'b))
(set-first seteqv/a)
(set-first seteqv/ab)
(set-first seteqv/ac)

(subset? (set) (set))
(subset? (set 'a) (set))
(subset? (set 'a) (set 'a))
(subset? (set 'a) (set 'a 'b))
(subset? (set 'a 'b) (set 'a 'b))
(subset? (set 'a 'c) (set 'a 'b 'c))

(subset? (seteq) (seteq))
(subset? (seteq 'a) (seteq))
(subset? (seteq 'a) (seteq 'a))
(subset? (seteq 'a) (seteq 'a 'b))
(subset? (seteq 'a 'b) (seteq 'a 'b))
(subset? (seteq 'a 'c) (seteq 'a 'b 'c))

(subset? (seteqv) (seteqv))
(subset? seteqv/a (seteqv))
(subset? seteqv/a seteqv/a)
(subset? seteqv/a seteqv/ab)
(subset? seteqv/ab seteqv/ab)
(subset? seteqv/ac seteqv/abc)

;; differing types, should all error
;; (subset? (set) (seteq))
;; (subset? (seteq 'a) (set))
;; (subset? (seteq 'a) (set 'a))
;; (subset? (set 'a) (seteq 'a 'b))
;; (subset? (set 'a 'b) (seteq 'a 'b))
;; (subset? (set 'a 'c) (seteq 'a 'b 'c))

(set=? (set) (set))
(set=? (set 'a) (set))
(set=? (set 'a) (set 'a))
(set=? (set 'a) (set 'a 'b))
(set=? (set 'a 'b) (set 'a 'b))
(set=? (set 'a 'c) (set 'a 'b 'c))

(set=? (seteq) (seteq))
(set=? (seteq 'a) (seteq))
(set=? (seteq 'a) (seteq 'a))
(set=? (seteq 'a) (seteq 'a 'b))
(set=? (seteq 'a 'b) (seteq 'a 'b))
(set=? (seteq 'a 'c) (seteq 'a 'b 'c))

(set=? (seteqv) (seteqv))
(set=? seteqv/a (seteqv))
(set=? seteqv/a (set-add (seteqv) 'a))
(set=? seteqv/a seteqv/ab)
(set=? seteqv/ab (set-add seteqv/a 'b))
(set=? seteqv/ac seteqv/abc)

(set-subtract (set 'a) (set))
(set-subtract (set) (set 'a))
(set-subtract (set 'a 'b 'c) (set 'a 'c))
(set-subtract (set 'a 'c) (set 'a 'b 'c))

(set-subtract (seteq 'a) (seteq))
(set-subtract (seteq) (seteq 'a))
(set-subtract (seteq 'a 'b 'c) (seteq 'a 'c))
(set-subtract (seteq 'a 'c) (seteq 'a 'b 'c))

(set-subtract seteqv/a (seteqv))
(set-subtract (seteqv) seteqv/a)
(set-subtract seteqv/abc seteqv/ab)
(set-subtract seteqv/ab seteqv/abc)

(set-union (set 'a) (set))
(set-union (set) (set 'a))
(set-union (set 'a 'b 'c) (set 'a 'c))
(set-union (set 'a 'c) (set 'a 'b 'c))

(set-union (seteq 'a) (seteq))
(set-union (seteq) (seteq 'a))
(set-union (seteq 'a 'b 'c) (seteq 'a 'c))
(set-union (seteq 'a 'c) (seteq 'a 'b 'c))

(set-union seteqv/a (seteqv))
(set-union (seteqv) seteqv/a)
(set-union seteqv/abc seteqv/ab)
(set-union seteqv/ab seteqv/abc)

(set-intersect (set 'a) (set))
(set-intersect (set) (set 'a))
(set-intersect (set 'a 'b 'c) (set 'a 'c))
(set-intersect (set 'a 'c) (set 'a 'b 'c))

(set-intersect (seteq 'a) (seteq))
(set-intersect (seteq) (seteq 'a))
(set-intersect (seteq 'a 'b 'c) (seteq 'a 'c))
(set-intersect (seteq 'a 'c) (seteq 'a 'b 'c))

(set-intersect seteqv/a (seteqv))
(set-intersect (seteqv) seteqv/a)
(set-intersect seteqv/abc seteqv/ab)
(set-intersect seteqv/ab seteqv/abc)

(set-partition (set 1 2 3 4) even? (set) (set))
(set-partition (set 1 2 3 4) even? (set 1) (set))
(set-partition (set 1 2 3 4) even? (set) (set 1))
;; different equal fn ok?
(set-partition (set 1 2 3 4) even? (seteq) (seteq 1))
(set-partition (seteq 1 2 3 4) even? (seteq) (seteq 1))
(set-partition (set 1 2 3 4) even? (seteq) (seteqv))

(set->list (set))
(set->list (set 'a))
(set->list (set 'a 'b))
(set->list (seteq))
(set->list (seteq 'a))
(set->list (seteq 'a 'b))
(set->list (seteqv))
(set->list seteqv/a)
(set->list seteqv/ab)

(list->set '())
(list->set '(1 2 3))
(list->seteq '())
(list->seteq '(1 2 3))
